openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/imedvedevea/SongLibrary/1.0.0
info:
  description: EffectiveMobile's test task
  version: "1.0.0"
  title: SongLibrary
  contact:
    email: iMedvedevEA@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /groups:
    post:
      summary: Add a music group
      operationId: addGroup
      description: Add a new music group to the library
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Пикник"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    get:
      summary: Get music groups
      operationId: getGroups
      description: Get a list of music groups with pagination
      parameters:
        - name: offset
          required: false
          in: query
          description: Music group оffset 
          schema:
            default: 0
            type: integer
            example: 0
        - name: limit
          required: false
          in: query
          description: Music group limit
          schema:
            default: 10
            type: integer
            example: 1
        - name: name
          required: false
          in: query
          description: The value of the filter by field name
          schema:
            type: string
            example: "Пикник"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_record_count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/group'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error             
  /groups/{group_id}:
    get:
      summary: Get music group
      operationId: getGroup
      description: Get a music group by ID
      parameters:
        - name: group_id
          required: true
          in: path
          description: Music group ID
          schema:
            type: string
            format: uuid
            example: "33ce21ac-1875-4420-9e95-e422922f5e6d"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error          
    put:
      summary: Update music group
      operationId: updateGroup
      description: Update a music group by ID
      parameters:
        - name: group_id
          required: true
          in: path
          description: Music group ID
          schema:
            type: string
            format: uuid
            example: "33ce21ac-1875-4420-9e95-e422922f5e6d"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Новое название группы Пикник"
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error      
    delete:
      summary: Delete music group
      operationId: deleteGroup
      description: Delete a music group by ID
      parameters:
        - name: group_id
          required: true
          in: path
          description: Music group ID
          schema:
            type: string
            format: uuid
            example: "33ce21ac-1875-4420-9e95-e422922f5e6d"
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error      
  /songs:
    post:
      summary: Add song
      operationId: addSong
      description: Add a new song to the library. The text, link, and release date are provided by an outside server api, otherwise the values are nil. Returns Internal Server Error, if the name of the music group is not found.
      parameters:
        - name: group
          required: true
          in: query
          description: Name of the music group
          schema:
            default: ""
            type: string
            example: "Пикник"        
        - name: song
          required: true
          in: query
          description: Song name
          schema:
            default: ""
            type: string
            example: "Там, на самом, на краю Земли"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/song'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
    get:
      summary: Get songs
      operationId: getSongs
      description: Get a songs with pagination
      parameters:
        - name: offset
          required: false
          in: query
          description: Songs оffset 
          schema:
            default: 0
            type: integer
            example: 0
        - name: limit
          required: false
          in: query
          description: Songs limit
          schema:
            default: 10
            type: integer
            example: 1
        - name: group
          required: false
          in: query
          description: The value of the filter by field group name
          schema:
            type: string
            example: "Пикник"
        - name: name
          required: false
          in: query
          description: The value of the filter by field song name
          schema:
            type: string
            example: "на краю Земли"
        - name: release_date
          required: false
          in: query
          description: The value of the filter by release date
          schema:
            type: string
            format: date
            example: '01-01-1990'
        - name: text
          required: false
          in: query
          description: The value of the filter by release text
          schema:
            type: string
            example: "ветра летят"
        - name: link
          required: false
          in: query
          description: The value of the filter by release link
          schema:
            type: string
            example: "youtu.be"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_record_count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/song'                      
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error     
  /songs/{song_id}:
    get:
      summary: Get song
      operationId: getSong
      description: Get a song by ID
      parameters:
        - name: song_id
          required: true
          in: path
          description: Song ID
          schema:
            type: string
            format: uuid
            example: "1a8b1880-e3aa-4c60-823e-25e632642276"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/song'
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update song
      operationId: updateSong
      description: Update a song by ID. Updates the data field if it's value in the request body is not null. To set the value of fields release_date,text,link to null, set the request body parameters set_release_date,set_text,set_link to true.
      parameters:
        - name: song_id
          required: true
          in: path
          description: Song ID
          schema:
            type: string
            format: uuid
            example: "1a8b1880-e3aa-4c60-823e-25e632642276"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: string
                  format: uuid
                  example: "5176a448-10b9-465f-8e78-bb00502f9055"
                name:
                  type: string
                  example: "Новое название песни Там на самом на краю Земли"
                release_date:
                  type: string
                  format: date
                  example: '02-02-1992'
                text:
                  type: string
                  example: "Новый текст песни Там на самом на краю Земли"
                link:
                  type: string
                  example: "https://youtu.be/vQWUcWn-OJc"
                set_release_date:
                  type: boolean
                  example: false
                set_text:
                  type: boolean
                  example: false
                set_link:
                  type: string
                  example: false
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete song
      operationId: deleteSong
      description: Delete a song by ID
      parameters:
        - name: song_id
          required: true
          in: path
          description: Song ID
          schema:
            type: string
            format: uuid
            example: "1a8b1880-e3aa-4c60-823e-25e632642276"
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error      
  /songs/{song_id}/text:
    get:
      summary: Get song text
      operationId: getSongText
      description: Get song verses with pagination by song ID
      parameters:
        - name: song_id
          required: true
          in: path
          description: Song ID
          schema:
            type: string
            format: uuid
            example: "1a8b1880-e3aa-4c60-823e-25e632642276"
        - name: offset
          required: false
          in: query
          description: Verses оffset 
          schema:
            default: 0
            type: integer
            example: 0
        - name: limit
          required: false
          in: query
          description: Verses limit
          schema:
            default: 5
            type: integer
            example: 1
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  all_record_count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/verse'
        '400':
          description: Bad Request
        '404':
          description: Page Not Found
        '500':
          description: Internal Server Error   
components:
  schemas:
    group:
      description: Music group
      type: object
      required:
        - group_id
        - name
      properties:
        group_id:
          type: string
          format: uuid
          example: "33ce21ac-1875-4420-9e95-e422922f5e6d"
        name:
          type: string
          example: "Пикник"
    verse:
      description: Verse of the song
      type: object
      required:
        - index
        - text
      properties:
        index:
          type: integer
          example: 1
        text:
          type: string
          example: "Там, на самом на краю Земли\nВ небывалой голубой дали\nВнемля звукам небывалых слов,\nСладко-сладко замирает кровь." 
    song:
      description: Song
      type: object
      required:
        - song_id
        - group
        - name
        - release_date
        - text
        - link
      properties:
        song_id:
          type: string
          format: uuid
          example: "1a8b1880-e3aa-4c60-823e-25e632642276"
        group:
          $ref: '#/components/schemas/group'
        name:
          type: string
          example: "Там, на самом, на краю Земли"
        releaseDate:
          type: string
          format: date
          example: '1991-01-01'
        text:
          type: string
          example: "Там, на самом на краю Земли\nВ небывалой голубой дали\nВнемля звукам небывалых сло,\nСладко-сладко замирает кровь.\n\nТам ветра летят, касаясь звeзд\nТам деревья не боятся гроз\nОкеаном бредят корабли\nТам, на самом, на краю Земли.\n\nЧто ж ты, сердце, рвeшься из груди?\nПогоди немного, погоди\nЧистый голос в небесах поeт\nСветлый полдень над Землeй встаeт."
        link:
          type: string
          example: "https://youtu.be/YIdEbLa6L6s"